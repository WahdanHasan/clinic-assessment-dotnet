// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using clinic_assessment.data;

#nullable disable

namespace clinic_assessment_redone.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("clinic_assessment_redone.Data.Models.Db.Entity.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateCreated")
                        .HasColumnType("date")
                        .HasColumnName("date_created");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<int>("DurationMins")
                        .HasColumnType("integer")
                        .HasColumnName("duration_mins");

                    b.Property<bool>("PatientAttended")
                        .HasColumnType("boolean")
                        .HasColumnName("patient_attended");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<TimeOnly>("TimeEnd")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_end");

                    b.Property<TimeOnly>("TimeStart")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_start");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("appointment");
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.ClinicUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nationality");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneCountryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_country_code");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.ToTable("clinic_user");
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("permission");
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("role");
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.RolePermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("permission_id")
                        .HasColumnType("integer");

                    b.Property<int>("role_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("permission_id");

                    b.HasIndex("role_id");

                    b.ToTable("role_permissions");
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("role_id")
                        .HasColumnType("integer");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("role_id");

                    b.HasIndex("user_id");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.Employee", b =>
                {
                    b.HasBaseType("clinic_assessment.data.Models.Db.Entity.ClinicUser");

                    b.Property<string>("OfficeRoomNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("office_room_num");

                    b.Property<string>("PhoneExt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_ext");

                    b.Property<List<TimeOnly>>("WorkEndTimes")
                        .IsRequired()
                        .HasColumnType("time without time zone[]")
                        .HasColumnName("work_end_times");

                    b.Property<List<TimeOnly>>("WorkStartTimes")
                        .IsRequired()
                        .HasColumnType("time without time zone[]")
                        .HasColumnName("work_start_times");

                    b.ToTable("employee");
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.Patient", b =>
                {
                    b.HasBaseType("clinic_assessment.data.Models.Db.Entity.ClinicUser");

                    b.Property<string>("bloodType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("blood_type");

                    b.ToTable("patient");
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.Doctor", b =>
                {
                    b.HasBaseType("clinic_assessment.data.Models.Db.Entity.Employee");

                    b.Property<string>("specialty")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("specialty");

                    b.ToTable("doctor");
                });

            modelBuilder.Entity("clinic_assessment_redone.Data.Models.Db.Entity.Appointment", b =>
                {
                    b.HasOne("clinic_assessment.data.Models.Db.Entity.Doctor", "Doctor")
                        .WithMany("doctorAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clinic_assessment.data.Models.Db.Entity.Patient", "Patient")
                        .WithMany("patientAppointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.RolePermissions", b =>
                {
                    b.HasOne("clinic_assessment.data.Models.Db.Entity.Permission", "Permission")
                        .WithMany("PermissionRoles")
                        .HasForeignKey("permission_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clinic_assessment.data.Models.Db.Entity.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.UserRoles", b =>
                {
                    b.HasOne("clinic_assessment.data.Models.Db.Entity.Role", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clinic_assessment.data.Models.Db.Entity.ClinicUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.Employee", b =>
                {
                    b.HasOne("clinic_assessment.data.Models.Db.Entity.ClinicUser", null)
                        .WithOne()
                        .HasForeignKey("clinic_assessment.data.Models.Db.Entity.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.Patient", b =>
                {
                    b.HasOne("clinic_assessment.data.Models.Db.Entity.ClinicUser", null)
                        .WithOne()
                        .HasForeignKey("clinic_assessment.data.Models.Db.Entity.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.Doctor", b =>
                {
                    b.HasOne("clinic_assessment.data.Models.Db.Entity.Employee", null)
                        .WithOne()
                        .HasForeignKey("clinic_assessment.data.Models.Db.Entity.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.ClinicUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.Permission", b =>
                {
                    b.Navigation("PermissionRoles");
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("RoleUsers");
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.Patient", b =>
                {
                    b.Navigation("patientAppointments");
                });

            modelBuilder.Entity("clinic_assessment.data.Models.Db.Entity.Doctor", b =>
                {
                    b.Navigation("doctorAppointments");
                });
#pragma warning restore 612, 618
        }
    }
}
